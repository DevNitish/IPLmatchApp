"use strict";var myipl=angular.module("myipl",["ui.router","ngFileUpload"]);myipl.controller("mainCtrl",["$scope","$http","$timeout","$state","$rootScope","Upload","getScore","liveScoreSimulator",function(e,t,o,r,l,s,a,n){l.user={name:"",mobile:null,email:"",idurl:"",password:""},e.picFile="",e.uploadPic=function(t){t.upload=s.upload({url:"https://api.cloudinary.com/v1_1/ddj0lavqa/upload",data:{upload_preset:"lvpnw5ma",tags:"myphotoalbum",context:"photo="+e.title,file:t}}),t.upload.then(function(e){l.user.idurl=e.data.secure_url,console.log("url ",e.data),o(function(){t.result=e.data})},function(t){t.status>0&&(e.errorMsg=t.status+": "+t.data)},function(o){t.progress=Math.min(100,parseInt(100*o.loaded/o.total)),100===t.progress&&(e.picFile="")})},e.alertClass="",e.message="",l.liveScore={},e.getUser=function(){t.get("/getUser").then(function(e){console.log("users===>",e),l.users=e.data})},e.saveUser=function(){console.log(" the user is ",l.user),l.user._id?t.post("/editUser",l.user).then(function(e){l.user={name:"",mobile:null,email:"",idurl:"",password:""}}):t.post("/saveUser",l.user).then(function(t){console.log("res",t),t.data.err?(e.alertClass="alert alert-danger",e.message=t.data.err):(e.alertClass="alert alert-success",l.savedUser=t.data,e.message="Registered! Redirecting...",r.go("home",{user:t.data}))})},e.editUser=function(e){l.user=e},e.deleteUser=function(e){console.log("delete the user",e._id),t.post("/deleteUser",e).then(function(e){console.log("deleted",e)})}}]),myipl.value("myscore",{}),myipl.factory("getScore",["$rootScope","$interval","myscore",function(e,t,o){var r={};return r.get=function(e){return e},r}]),myipl.factory("liveScoreSimulator",["getScore","$interval",function(e,t){var o=0;return t(function(){e.get(o),o++},3e3,5),null}]);
"use strict";myipl.config(["$stateProvider","$urlRouterProvider",function(t,e){e.otherwise("/registration"),t.state("registration",{url:"/registration",templateUrl:"views/registration.html",controller:"mainCtrl"}).state("home",{url:"/home",templateUrl:"views/home.html",controller:"mainCtrl"}).state("matches",{url:"/matches",templateUrl:"views/match.html",controller:"mainCtrl"}).state("contact",{url:"/contact",templateUrl:"views/contact.html",controller:"mainCtrl"}).state("teams",{url:"/teams",templateUrl:"views/teams.html",controller:"teamCtrl"}).state("livescore",{url:"/livescore",templateUrl:"views/livescore.html",controller:"liveCtrl"}).state("teaminfo",{url:"/:name/:img/:season",templateUrl:"views/teaminfo.html",params:{data:null,teaminfo:null},controller:["$scope","$rootScope","$state","$stateParams","$http","match","teaminfo",function(t,e,a,l,o,n,r){t.allSeason=[],t.match=n,t.year=l.season,console.log(n),t.teaminfo=r,t.callallSeason=function(){a.param;for(l.season;l.season>=2008;l.season--)t.allSeason.push(parseInt(l.season))},t.callallSeason(),t.findMatch=function(e){var a={name:l.name,season:e};console.log("obj",a),t.year=e,o.post("/findTeamDetails",a).then(function(e){t.match=e.data})},console.log(l,t.allSeason)}],resolve:{match:["$stateParams","$http",function(t,e){return t.data?t.data:e.post("/findTeamDetails",t).then(function(t){return t.data})}],teaminfo:["$stateParams","$http",function(t,e){return{name:t.name,imageurl:t.img}}]}})}]);
"use strict";myipl.controller("liveCtrl",["$scope","$http","$interval","$state","$stateParams","$rootScope","getScore",function(t,e,o,c,n,r,u){t.currentMatch=[],t.score=0;!function(){e.get("../includes/forOnlyDemo/shvsrcb.json").then(function(e){t.currentMatch=e.data})}(),t.test=u.get(),t.count=0,t.liveScoreSimulator=function(){t.count=0,o(function(){console.log(t.count),t.count++},3e3,t.currentMatch.length)},t.liveScoreSimulator()}]);
"use strict";myipl.controller("teamCtrl",["$scope","$http","$timeout","$state","$stateParams","$rootScope",function(a,e,t,n,o,m){a.allTeam=[],a.getAllTeam=function(){e.get("/getAllTeam").then(function(e){a.allTeam=e.data})},a.lastSeason="2016",a.currentTeam={},a.currentTeamInfo=[],a.moreInfo=function(t){var o={};o.name=t.name,o.season=a.lastSeason,a.currentTeam=t,e.post("/findTeamDetails",o).then(function(e){e.data.length?(console.log("res=",e.data),a.currentTeamInfo=e.data,n.go("teaminfo",{name:a.currentTeam.name,season:a.lastSeason,img:t.imageurl,data:e.data})):(a.lastSeason--,a.moreInfo({name:a.currentTeam.name,season:a.lastSeason}))})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
